<?xml version="1.0" encoding="utf-8"?>
<launch>
	<!-- Arguments -->
	<arg name="simulator" default="true" doc="true if you are using simulator; false if not" />
	<arg name="socket" default="true" doc="true if you are using socket; flase if not" />
	<arg name="host" default="172.17.0.1" doc="Use your host IP address running the model" />
	<arg name="port" default="12322" doc="Port number to connect with your host" />
	<arg name="speed" default="0.2" />
	<arg name="omega_gain" default="1.0" />

	<!-- Joy Node -->
	<node pkg="joy" type="joy_node" name="joy_node" ns="simulator" output="screen" clear_params="true" required="true" />
	
	<!-- Joy Mapper Node -->
	<node pkg="joy_mapper" type="joy_mapper_node.py" name="joy_mapper_node" ns="simulator" output="screen" clear_params="true" required="true" />
	
	<!-- Inverse Kinematics Node -->
	<node pkg="dagu_car" type="inverse_kinematics_node.py" name="inverse_kinematics_node" ns="simulator" output="screen" clear_params="true" required="true">
		<remap from="inverse_kinematics_node/car_cmd" to="joy_mapper_node/car_cmd" />
		<remap from="inverse_kinematics_node/wheels_cmd" to="wheels_driver_node/wheels_cmd" />
	</node>

	<!-- Deep Learning Lane Following Node using Socket -->
	<node if="$(arg socket)" pkg="lane_following" type="dl_lane_following.py" name="dl_lane_following" ns="simulator" output="screen" clear_params="true" required="true" >
		<param name="host" value="$(arg host)" type="str" />
		<param name="port" value="$(arg port)" type="int" />
		<param name="speed" value="$(arg speed)" type="double" />
		<param name="omega_gain" value="$(arg omega_gain)" type="double" />
	</node>

	<!-- Deep Learning Lane Following Node using Neural Compute Stick -->
	<node unless="$(arg socket)" pkg="lane_following" type="dl_lane_following_ncs.py" name="dl_lane_following" ns="simulator" output="screen" clear_params="true" required="true">
		<param name="speed" value="$(arg speed)" type="double" />
		<param name="omega_gain" value="$(arg omega_gain)" type="double" />
	</node>

	<!-- Rosbride Websocket for Simulator -->
	<node if="$(arg simulator)" pkg="rosbridge_server" type="rosbridge_websocket" name="rosbridge_websocket" output="screen" required="true" />
	
	<!-- Wheels Driver Node for DuckieBot -->
	<node unless="$(arg simulator)" pkg="dagu_car" type="wheels_driver_node.py" name="wheels_driver_node" ns="simulator" output="screen" clear_params="true" required="true" />
    
	<!-- Camera Node for DuckieBot -->
    <node unless="$(arg simulator)" pkg="pi_camera" name="camera_node" type="camera_node_sequence.py" ns="simulator" output="screen" clear_params="true" required="true">
		<rosparam command="load" file="$(find duckietown)/config/baseline/pi_camera/camera_node/default.yaml"/>
		<param name="use_simulator_cam" value="false"/>
	</node>
</launch>